{
    "patches": [
        {
            "label": "2025-10-24_09-14-43",
            "content": "@@ -418,711 +418,71 @@\n ize%0A\n-    %0A    #sena pelo o amor de Deus que nome %C3%A9 esse%0A    def usagepersheet(self) -%3E int:%0A        if self.__calibre == 'HB':%0A            return 1%0A        elif self.__calibre == '2B':%0A            return 2%0A        elif self.__calibre == %224B%22:%0A            return 4%0A        elif self.__calibre == %226B%22:%0A            return 6%0A        return 0%0A    %0A    def __str__(self):%0A        return f%22%7Bself.__calibre%7D:%7Bself.__hardness%7D: %7Bself.__size%7D%22%0A    %0Aclass Pencil:%0A    def __init__(self, calibre: float):%0A        self.__calibre = calibre%0A        self.__ponta: grafite %7C None%0A%0A    def HasGrafite(self) -%3E bool:%0A        if self.__ponta != None:%0A            return True%0A        else:%0A            return False%0A%0A    def\n+%0A    %0A    def __str__(self):%0A        return f%22%7Bself.__calibre%7D: %22\n",
            "lines": "21"
        },
        {
            "label": "2025-10-24_09-36-25",
            "content": "class grafite:\n    def __init__(self, calibre:float, hardness:str, size:int ):\n        self.__calibre = calibre\n        self.__hardness = hardness\n        self.__size = size\n\n    def getcalibre(self):\n        return self.__calibre\n    \n    def getHardness(self):\n        return self.__hardness\n    \n    def getSize(self):\n        return self.__size\n    \n    def setSize(self, size:int):\n        self.__size = size\n    \n    #sena pelo o amor de Deus que nome \u00e9 esse\n    def usagepersheet(self) -> int:\n        if self.__calibre == 'HB':\n            return 1\n        elif self.__calibre == '2B':\n            return 2\n        elif self.__calibre == \"4B\":\n            return 4\n        elif self.__calibre == \"6B\":\n            return 6\n        return 0\n    \n    def __str__(self):\n        return f\"{self.__calibre}:{self.__hardness}: {self.__size}\"\n    \nclass Pencil:\n    def __init__(self, calibre: float):\n        self.__calibre = calibre\n        self.__ponta: grafite | None\n\n    def HasGrafite(self) -> bool:\n        if self.__ponta != None:\n            return True\n        else:\n            return False\n\n    def",
            "lines": "45"
        }
    ]
}